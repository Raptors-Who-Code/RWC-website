generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DIRECT_URL")
}

enum Role {
  ADMIN
  MEMBER
}

enum VerificationCodeType {
  EMAIL_VERIFICATION
  PASSWORD_RESET
  OTHER
}

enum JobLevel {
  JUNIOR
  MID_LEVEL
  SENIOR
  UNKNOWN
}

enum JobLocation {
  ONSITE
  REMOTE
  HYBRID
  OTHER
}

enum JobHourTypes {
  FULL_TIME
  PART_TIME
  CONTRACT
}

model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  verified  Boolean  @default(false)
  role      Role     @default(MEMBER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  sessions          Session[] // Relation to Session model
  verificationCodes VerificationCode[] // Relation to VerificationCode model
  jobs              Job[]
  events            Event[]
  registeredEvents  RegisteredEvent[]
  appliedJobs       AppliedJob[]

  @@map("users")
}

model Session {
  id        String   @id @default(uuid())
  userId    String
  userAgent String? // Optional field for storing user agent details
  createdAt DateTime @default(now())
  expiresAt DateTime @default(dbgenerated("NOW() + INTERVAL '30 days'")) // Postgres-specific interval for expiration

  // Relation to User model
  user User @relation(fields: [userId], references: [id])

  @@index([userId]) // Create an index for efficient lookups by userId
  @@map("sessions") // Maps this model to the "sessions" table in the database
}

model VerificationCode {
  id        String               @id @default(uuid())
  userId    String
  type      VerificationCodeType
  createdAt DateTime             @default(now())
  expiresAt DateTime

  user User @relation(fields: [userId], references: [id])

  @@index([userId]) // Index for efficient lookups by userId
  @@map("verification_codes") // Map to "verification_codes" table
}

model Job {
  id           String       @id @default(uuid())
  title        String
  content      String
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  userId       String
  jobLink      String
  jobLevel     JobLevel?
  jobLocation  JobLocation
  jobHoursType JobHourTypes
  internship   Boolean

  user         User         @relation(fields: [userId], references: [id])
  usersApplied AppliedJob[]

  @@index([userId]) // Index for efficient lookups by userId
  @@map("jobs") // Map to "jobs" table
}

model Event {
  id        String   @id @default(uuid())
  title     String
  content   String
  date      DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  imageUrl  String? // ImageUrl field to store the image url

  user            User              @relation(fields: [userId], references: [id])
  usersRegistered RegisteredEvent[]

  @@index([userId]) // Index for efficient lookups by userId
  @@map("events") // Map to "events" table
}

model RegisteredEvent {
  id      String @id @default(uuid())
  userId  String
  eventId String

  user  User  @relation(fields: [userId], references: [id])
  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@index([userId, eventId]) // Composite index for efficient lookups
  @@map("registered_events") // Map to "registered_events" table
}

model AppliedJob {
  id     String @id @default(uuid())
  userId String
  jobId  String

  user User @relation(fields: [userId], references: [id])
  job  Job  @relation(fields: [jobId], references: [id])

  @@index([userId, jobId]) // Composite index for efficient lookups
  @@map("applied_jobs") // Map to "applied_jobs" table
}
